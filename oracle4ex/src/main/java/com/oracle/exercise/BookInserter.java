package com.oracle.exercise;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Main application class that inserts 100 sample records to the BOOK table
 */
public class BookInserter {
    
    private static final int RECORDS_TO_INSERT = 100;
    
    public static void main(String[] args) {
        System.out.println("=== Oracle JDBC Book Records Inserter ===");
        System.out.println("Starting application to insert " + RECORDS_TO_INSERT + " sample records...");
        
        BookInserter inserter = new BookInserter();
        try {
            inserter.run();
        } catch (Exception e) {
            System.err.println("Application failed: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
        
        System.out.println("Application completed successfully!");
    }
    
    /**
     * Main application logic
     */
    public void run() throws SQLException {
        Connection connection = null;
        
        try {
            // Get database connection
            connection = DatabaseConnection.getConnection();
            System.out.println("Database connection established successfully!");
            
            // Create the BOOK table if it doesn't exist
            createBookTable(connection);
            
            // Generate and insert sample books
            List<Book> books = generateSampleBooks();
            insertBooks(connection, books);
            
            // Verify the insertion
            verifyInsertion(connection);
            
        } finally {
            // Close database connection
            DatabaseConnection.closeConnection(connection);
        }
    }
    
    /**
     * Create the BOOK table if it doesn't exist
     * @param connection Database connection
     * @throws SQLException if table creation fails
     */
    private void createBookTable(Connection connection) throws SQLException {
        String createTableSQL = "CREATE TABLE BOOK (" +
            "ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
            "NAME VARCHAR2(255) NOT NULL, " +
            "ISBN VARCHAR2(20) NOT NULL UNIQUE, " +
            "CREATED_DATE DATE DEFAULT SYSDATE" +
            ")";
        
        try (Statement statement = connection.createStatement()) {
            statement.execute(createTableSQL);
            System.out.println("BOOK table created successfully!");
        } catch (SQLException e) {
            // Table might already exist
            if (e.getErrorCode() == 955) { // ORA-00955: name is already used by an existing object
                System.out.println("BOOK table already exists, skipping creation.");
            } else {
                throw e;
            }
        }
    }
    
    /**
     * Generate sample books with random data
     * @return List of sample books
     */
    private List<Book> generateSampleBooks() {
        System.out.println("Generating " + RECORDS_TO_INSERT + " sample books...");
        
        List<Book> books = new ArrayList<>();
        for (int i = 0; i < RECORDS_TO_INSERT; i++) {
            Book book = BookDataGenerator.generateRandomBook();
            books.add(book);
            
            // Print progress every 25 books
            if ((i + 1) % 25 == 0) {
                System.out.println("Generated " + (i + 1) + " books...");
            }
        }
        
        System.out.println("Sample books generation completed!");
        return books;
    }
    
    /**
     * Insert books into the database
     * @param connection Database connection
     * @param books List of books to insert
     * @throws SQLException if insertion fails
     */
    private void insertBooks(Connection connection, List<Book> books) throws SQLException {
        System.out.println("Inserting books into the database...");
        
        String insertSQL = "INSERT INTO BOOK (NAME, ISBN) VALUES (?, ?)";
        
        try (PreparedStatement preparedStatement = connection.prepareStatement(insertSQL)) {
            connection.setAutoCommit(false); // Start transaction
            
            int batchSize = 25;
            int count = 0;
            
            for (Book book : books) {
                preparedStatement.setString(1, book.getName());
                preparedStatement.setString(2, book.getIsbn());
                preparedStatement.addBatch();
                count++;
                
                // Execute batch every 25 records
                if (count % batchSize == 0) {
                    preparedStatement.executeBatch();
                    System.out.println("Inserted " + count + " books...");
                }
            }
            
            // Execute remaining batch
            if (count % batchSize != 0) {
                preparedStatement.executeBatch();
            }
            
            connection.commit(); // Commit transaction
            System.out.println("All " + count + " books inserted successfully!");
            
        } catch (SQLException e) {
            connection.rollback(); // Rollback on error
            throw e;
        } finally {
            connection.setAutoCommit(true); // Reset auto-commit
        }
    }
    
    /**
     * Verify the insertion by counting records in the BOOK table
     * @param connection Database connection
     * @throws SQLException if verification fails
     */
    private void verifyInsertion(Connection connection) throws SQLException {
        String countSQL = "SELECT COUNT(*) FROM BOOK";
        
        try (Statement statement = connection.createStatement();
             java.sql.ResultSet resultSet = statement.executeQuery(countSQL)) {
            
            if (resultSet.next()) {
                int totalRecords = resultSet.getInt(1);
                System.out.println("Verification: Total records in BOOK table = " + totalRecords);
                
                if (totalRecords >= RECORDS_TO_INSERT) {
                    System.out.println("✓ Verification successful! At least " + RECORDS_TO_INSERT + " records found.");
                } else {
                    System.out.println("⚠ Warning: Expected at least " + RECORDS_TO_INSERT + " records, but found " + totalRecords);
                }
            }
        }
    }
}